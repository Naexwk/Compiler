# Generated from littleDuck.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,217,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,
        1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
        20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,
        26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,4,30,174,8,30,11,30,12,30,
        175,1,30,1,30,1,31,1,31,1,31,1,31,1,32,4,32,185,8,32,11,32,12,32,
        186,1,33,4,33,190,8,33,11,33,12,33,191,1,33,1,33,4,33,196,8,33,11,
        33,12,33,197,3,33,200,8,33,1,34,1,34,5,34,204,8,34,10,34,12,34,207,
        9,34,1,34,1,34,1,35,1,35,5,35,213,8,35,10,35,12,35,216,9,35,0,0,
        36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,1,0,5,2,0,9,10,13,13,1,0,48,57,1,0,34,34,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,223,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,
        81,1,0,0,0,5,83,1,0,0,0,7,88,1,0,0,0,9,92,1,0,0,0,11,96,1,0,0,0,
        13,98,1,0,0,0,15,100,1,0,0,0,17,104,1,0,0,0,19,110,1,0,0,0,21,115,
        1,0,0,0,23,117,1,0,0,0,25,119,1,0,0,0,27,121,1,0,0,0,29,124,1,0,
        0,0,31,126,1,0,0,0,33,128,1,0,0,0,35,133,1,0,0,0,37,136,1,0,0,0,
        39,142,1,0,0,0,41,148,1,0,0,0,43,153,1,0,0,0,45,155,1,0,0,0,47,157,
        1,0,0,0,49,159,1,0,0,0,51,161,1,0,0,0,53,164,1,0,0,0,55,166,1,0,
        0,0,57,168,1,0,0,0,59,170,1,0,0,0,61,173,1,0,0,0,63,179,1,0,0,0,
        65,184,1,0,0,0,67,189,1,0,0,0,69,201,1,0,0,0,71,210,1,0,0,0,73,74,
        5,112,0,0,74,75,5,114,0,0,75,76,5,111,0,0,76,77,5,103,0,0,77,78,
        5,114,0,0,78,79,5,97,0,0,79,80,5,109,0,0,80,2,1,0,0,0,81,82,5,59,
        0,0,82,4,1,0,0,0,83,84,5,109,0,0,84,85,5,97,0,0,85,86,5,105,0,0,
        86,87,5,110,0,0,87,6,1,0,0,0,88,89,5,101,0,0,89,90,5,110,0,0,90,
        91,5,100,0,0,91,8,1,0,0,0,92,93,5,118,0,0,93,94,5,97,0,0,94,95,5,
        114,0,0,95,10,1,0,0,0,96,97,5,58,0,0,97,12,1,0,0,0,98,99,5,44,0,
        0,99,14,1,0,0,0,100,101,5,105,0,0,101,102,5,110,0,0,102,103,5,116,
        0,0,103,16,1,0,0,0,104,105,5,102,0,0,105,106,5,108,0,0,106,107,5,
        111,0,0,107,108,5,97,0,0,108,109,5,116,0,0,109,18,1,0,0,0,110,111,
        5,98,0,0,111,112,5,111,0,0,112,113,5,111,0,0,113,114,5,108,0,0,114,
        20,1,0,0,0,115,116,5,123,0,0,116,22,1,0,0,0,117,118,5,125,0,0,118,
        24,1,0,0,0,119,120,5,61,0,0,120,26,1,0,0,0,121,122,5,105,0,0,122,
        123,5,102,0,0,123,28,1,0,0,0,124,125,5,40,0,0,125,30,1,0,0,0,126,
        127,5,41,0,0,127,32,1,0,0,0,128,129,5,101,0,0,129,130,5,108,0,0,
        130,131,5,115,0,0,131,132,5,101,0,0,132,34,1,0,0,0,133,134,5,100,
        0,0,134,135,5,111,0,0,135,36,1,0,0,0,136,137,5,119,0,0,137,138,5,
        104,0,0,138,139,5,105,0,0,139,140,5,108,0,0,140,141,5,101,0,0,141,
        38,1,0,0,0,142,143,5,112,0,0,143,144,5,114,0,0,144,145,5,105,0,0,
        145,146,5,110,0,0,146,147,5,116,0,0,147,40,1,0,0,0,148,149,5,118,
        0,0,149,150,5,111,0,0,150,151,5,105,0,0,151,152,5,100,0,0,152,42,
        1,0,0,0,153,154,5,91,0,0,154,44,1,0,0,0,155,156,5,93,0,0,156,46,
        1,0,0,0,157,158,5,62,0,0,158,48,1,0,0,0,159,160,5,60,0,0,160,50,
        1,0,0,0,161,162,5,33,0,0,162,163,5,61,0,0,163,52,1,0,0,0,164,165,
        5,43,0,0,165,54,1,0,0,0,166,167,5,45,0,0,167,56,1,0,0,0,168,169,
        5,42,0,0,169,58,1,0,0,0,170,171,5,47,0,0,171,60,1,0,0,0,172,174,
        7,0,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,176,
        1,0,0,0,176,177,1,0,0,0,177,178,6,30,0,0,178,62,1,0,0,0,179,180,
        5,32,0,0,180,181,1,0,0,0,181,182,6,31,0,0,182,64,1,0,0,0,183,185,
        7,1,0,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,
        1,0,0,0,187,66,1,0,0,0,188,190,7,1,0,0,189,188,1,0,0,0,190,191,1,
        0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,199,1,0,0,0,193,195,5,
        46,0,0,194,196,7,1,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,
        0,0,0,197,198,1,0,0,0,198,200,1,0,0,0,199,193,1,0,0,0,199,200,1,
        0,0,0,200,68,1,0,0,0,201,205,5,34,0,0,202,204,8,2,0,0,203,202,1,
        0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,1,
        0,0,0,207,205,1,0,0,0,208,209,5,34,0,0,209,70,1,0,0,0,210,214,7,
        3,0,0,211,213,7,4,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,
        0,0,0,214,215,1,0,0,0,215,72,1,0,0,0,216,214,1,0,0,0,8,0,175,186,
        191,197,199,205,214,1,6,0,0
    ]

class littleDuckLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    NEWLINE = 31
    WHITESPACE = 32
    CTE_INT = 33
    CTE_FLOAT = 34
    CTE_STRING = 35
    ID = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "';'", "'main'", "'end'", "'var'", "':'", "','", 
            "'int'", "'float'", "'bool'", "'{'", "'}'", "'='", "'if'", "'('", 
            "')'", "'else'", "'do'", "'while'", "'print'", "'void'", "'['", 
            "']'", "'>'", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "' '" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "WHITESPACE", "CTE_INT", "CTE_FLOAT", "CTE_STRING", 
            "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "NEWLINE", "WHITESPACE", 
                  "CTE_INT", "CTE_FLOAT", "CTE_STRING", "ID" ]

    grammarFileName = "littleDuck.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


